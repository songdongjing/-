// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/07/2024 22:09:24"
                                                                                
// Verilog Test Bench template for design : uart_send
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module uart_send_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg sys_clk;
reg sys_rst_n;
// wires                                               
wire uart_txd;

// assign statements (if any)                          
uart_send i1 (
// port map - connection between master ports and signals/registers   
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n),
	.uart_txd(uart_txd)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin   
 sys_clk = 1'b0;
 sys_rst_n = 1'b0; // 复位
 #100 sys_rst_n = 1'b1; // 在第 100ns 的时候复位信号拉高                                                      
// --> end                                             
$display("Running testbench");                       
end                                                    
always #20 sys_clk = ~sys_clk;                                              
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                      
//@eachvec;                                              
// --> end  
uart_send uut

(

.sys_clk (sys_clk),

.sys_rst_n (sys_rst_n),

.uart_txd (uart_txd)

);                                                                                            
endmodule

